<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.5.2" created="2015-01-19 03:34" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Timothy P. Schreiber</title>
	<link>http://hosting.bizinix.com/timschreiber</link>
	<description>.NET Developer/Architect - Lexington &#38; Louisville, KY Areas - C#, ASP.NET MVC, WCF, Entity Framework, SQL Server, Agile, Object-Oriented Design, SOLID, Design Patterns</description>
	<pubDate>Mon, 19 Jan 2015 03:34:13 +0000</pubDate>
	<language>en-US</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://hosting.bizinix.com/</wp:base_site_url>
	<wp:base_blog_url>http://hosting.bizinix.com/timschreiber</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>TscWpAdmin</wp:author_login><wp:author_email>tim.schreiber@gmail.com</wp:author_email><wp:author_display_name><![CDATA[Tim]]></wp:author_display_name><wp:author_first_name><![CDATA[Tim]]></wp:author_first_name><wp:author_last_name><![CDATA[Schreiber]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.5.2</generator>

	<item>
		<title>Former STGenius, Soon-to-Be SISsy</title>
		<link>http://hosting.bizinix.com/timschreiber/2012/10/10/former-stgenius-soon-to-be-sissy/</link>
		<pubDate>Wed, 10 Oct 2012 21:30:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/2012/10/10/former-stgenius-soon-to-be-sissy/</guid>
		<description></description>
		<content:encoded><![CDATA[Back in August, I wrote a post announcing my job hunt in Kentucky – I had actually been sending out résumés since mid-June. Well, over the past couple of months, I’ve maintained a dialog with a company in Lexington which ultimately led to a trip out there this past week, and my acceptance of their job offer.<br><br>I will be working for <a href="http://www.thinksis.com/about-sis-it-technology-solutions" target="_blank">Software Information Systems (SIS)</a> as a Senior .NET Consultant doing pretty much the same exact same thing I do for <a href="http://www.stgutah.com/company/" target="_blank">STG</a> now.  My first gig starts October 29 with the Commonwealth of Kentucky, where I will be leading a team of programmers developing enhancements and new projects for the <a href="http://www.chfs.ky.gov/os/oig/KASPER.htm" target="_blank">Kentucky All Schedule Prescription Electronic Reporting (KASPER)</a> program. KASPER is a statewide initiative that enlists health care providers, pharmacists, law enforcement, and the inspector general’s office in combatting Kentucky’s prescription drug abuse problem, which is <a href="http://www.courier-journal.com/article/20120921/NEWS01/309210088/Kentucky-part-prescription-drug-abuse-initiative" target="_blank">among the worst in the nation</a> (Oxycontin is called “hillbilly heroin” for a reason).<br><br>SIS is very active in the Microsoft community in Lexington, Cincinnati, and Louisville. They sponsor the local .NET user group and SQL Saturday events. They seemed excited when I suggested the possibility of creating a software craftsmanship group in the area as well. SIS is also remarkably similar to STG in that it is privately owned, debt free, 140 employees, family-oriented, low-turnaround, and flush with workplace awards and other positive notoriety. Basically, they stand out in their market like STG stands out in Utah.<br><br>I wrote before that I am sad to be leaving STG, but to all things there is a time and a season. Right now, it’s time to take my family to Kentucky to be closer to my wife’s side of the family. Her roots are out there, and she has wanted us to go back for a long time. I’m a little scared of the change, but ready for a new adventure and excited for a challenge.<br><br>Now there’s just an ass-load of work to do in the next two weeks: pack up the house, get it sold, get everyone and everything out there safely, etc. And on top of it all, I need to fit in time to study and test for an MCTS certification, which needs to be done before my start date. It’s safe to say we’re all more than a little overwhelmed.<br><br>I hope to resume (who am I kidding – more like <i>start</i>) more technical posting once things have settled down a bit.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2012-10-10 21:30:00</wp:post_date>
		<wp:post_date_gmt>2012-10-10 21:30:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>former-stgenius-soon-to-be-sissy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[codeschreiber.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[Tim Schreiber]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2012/10/former-stgenius-soon-to-be-sissy.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_blogger_self</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.blogger.com/feeds/8015211951449396606/posts/default/9216406799377640136]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Not Nice, ThinkPad!</title>
		<link>http://hosting.bizinix.com/timschreiber/2012/08/18/not-nice-thinkpad/</link>
		<pubDate>Sat, 18 Aug 2012 01:57:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/2012/08/18/not-nice-thinkpad/</guid>
		<description></description>
		<content:encoded><![CDATA[My ThinkPad just about gave me a heart attack today.  I had plugged it in at work to charge it, and then plugged my phone into a USB port to charge it too.  It sat like that for a few hours, and when I tried to boot it up later in the afternoon, it seemed like it had bricked.  It wouldn’t even show the Thinkpad BIOS screen – it just hung with a black screen and the Bluetooth indicator on.<br><br>After all I spent on it last summer, and after all the upgrades I just made a few weeks ago, I was in a full-scale panic.  I tried removing the battery, disconnecting the power supply – nothing.  I was about to call Lenovo support and resign myself to the possibility that my once-great development laptop had become an expensive paperweight.<br><br>Then I remembered the USB cable connected to my phone.  Surely that couldn’t cause this weirdness, could it?  I disconnected it and tried to boot up again anyway.  To my surprise, my ThinkPad booted right up.  I still don’t understand how; but for some unknown reason, my phone was preventing my laptop from booting.<br><br>There’s my trauma for the day.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2012-08-18 01:57:00</wp:post_date>
		<wp:post_date_gmt>2012-08-18 01:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>not-nice-thinkpad</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="hardware"><![CDATA[Hardware]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[codeschreiber.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[Tim Schreiber]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2012/08/not-nice-thinkpad.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_blogger_self</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.blogger.com/feeds/8015211951449396606/posts/default/5185074983401515467]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[David Adsit]]></wp:comment_author>
			<wp:comment_author_email>noreply@blogger.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.blogger.com/profile/04091755691184549942</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-08-18 03:49:59</wp:comment_date>
			<wp:comment_date_gmt>2012-08-18 03:49:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Your BIOS is probably set for USB boot and it detected something on the USB port, but the OS there didn't actually boot your hardware.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Tim Schreiber]]></wp:comment_author>
			<wp:comment_author_email>noreply@blogger.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.blogger.com/profile/12294714992205469596</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-08-18 05:41:03</wp:comment_date>
			<wp:comment_date_gmt>2012-08-18 05:41:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's what I thought initially after I realized the problem, but when I thought about it, it couldn't have been (unless I completely misunderstand how my ThinkPad boots).<br /><br />The problem I was seeing what that it wouldn't even POST when I hit the power button, and the BIOS screen never showed, so I'm pretty sure it didn't even get to the point the boot order.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Dear Recruiters</title>
		<link>http://hosting.bizinix.com/timschreiber/2012/08/17/dear-recruiters/</link>
		<pubDate>Fri, 17 Aug 2012 01:53:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/2012/08/17/dear-recruiters/</guid>
		<description></description>
		<content:encoded><![CDATA[You will be much more successful if you simply put a little effort into your job and stop pissing people off.  Here are some ideas:<br><ul>
<li>If you are recruiting candidates who reside in the United States for positions located in the United States, do not offshore your cold calls to India.</li>
<li>If you find my résumé with a keyword search on the job boards, take ten seconds to see if my location, skills, and experience are actually a match.  Pushing some three-month junior/entry-level contract in Marlyand on someone in Salt Lake City with 15 years of experience is a good way to piss them off.</li>
<li>If you call me, I will most likely not answer if I do not immediately recognize your number.  If that happens, do not call over and over again.  That is called harassment and will get you reported to the authorities.  Please leave a single voice mail.  If I do not have a pre-existing personal or business relationship with you, do not mark that voice mail “urgent.”  That is unprofessional and annoying.  If I do not return your call, you may interpret it as “not interested,” after which I would appreciate if you would stop calling.</li>
<li>If you email me, do not use some crappy form letter.  Feeling like just another database record does not exactly give me the warm fuzzies about your agency or the companies you represent.  But if you must use a form letter, at least try to customize it with my information.  Few things turn me off faster than reading “Dear Consultant” at the top of an email.  As with phone calls, if I do not respond to your email, you may interpret it as “not interested.”  If you continue to email me, I will blacklist company’s domain name and report you to SpamCop.</li>
</ul>You will eventually learn as I have, that in career matters, it is the relationships that are most important.  Fail to build and nurture those relationships, and you will fail to attract the best talent.  Yes, it takes effort.  No, it is not easy.  But follow these simple guidelines, and you will see considerable improvement in the quantity and quality of your placements.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2012-08-17 01:53:00</wp:post_date>
		<wp:post_date_gmt>2012-08-17 01:53:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dear-recruiters</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="job"><![CDATA[Job]]></category>
		<category domain="category" nicename="recruiters"><![CDATA[Recruiters]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[codeschreiber.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[Tim Schreiber]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2012/08/dear-recruiters.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_blogger_self</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.blogger.com/feeds/8015211951449396606/posts/default/7327132770366244507]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Things Are A-Changin&#039;</title>
		<link>http://hosting.bizinix.com/timschreiber/2012/08/14/things-are-a-changin/</link>
		<pubDate>Tue, 14 Aug 2012 02:36:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/2012/08/14/things-are-a-changin/</guid>
		<description></description>
		<content:encoded><![CDATA[Holy crap, I found my blog again.  A lot has been going on the past couple of months that have detracted me from my side projects and blog posting.  First and foremost has been my job hunt.<br><br>"Wait, what?" some might be thinking,  "I thought you were pleased as punch to be an STG company man."<br><br>Well, I have been and for the most part still am, but nothing lasts forever.  Believe me, I'd be happy to stay put at my current gig, but I have decided to relocate to the Lexington, Kentucky area for family reasons.  Given the difference in the software development job market between Salt Lake City and Lexington, this is quite a commitment to be making.  There just aren't as many opportunities out there.  But that also means the talent pool is smaller, and I have a great opportunity to really try to stand out.<br><br>So yes, I'm looking for direct-hire or long-term contract employment in and around Lexington and Frankfort, Kentucky.  Maybe if things don't pan out by early next year, I might consider Louisville then.  STG is trying to find client work out that way for me, but I'm definitely exploring opportunities on my own as well.<br><br>To support my job hunt, I've updated my <a href="http://timschreiber.com/" target="_blank">timschreiber.com</a> website with my latest resume and contact form.  So, go check it out!<br><br>Finally, if you or anyone you know has any leads in Kentucky, pass them on!  If you don't have my e-mail address, you can always use my contact form at <a href="http://timschreiber.com/contact.aspx" target="_blank">timschreiber.com/contact.aspx</a>.  Thanks!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2012-08-14 02:36:00</wp:post_date>
		<wp:post_date_gmt>2012-08-14 02:36:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>things-are-a-changin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="job"><![CDATA[Job]]></category>
		<category domain="category" nicename="kentucky"><![CDATA[Kentucky]]></category>
		<category domain="category" nicename="stg"><![CDATA[STG]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[codeschreiber.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[Tim Schreiber]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2012/07/things-are-changin.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_blogger_self</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.blogger.com/feeds/8015211951449396606/posts/default/4809762919399613849]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Visual Studio Productivity Power Tools and CSHTML Files</title>
		<link>http://hosting.bizinix.com/timschreiber/2012/05/19/visual-studio-productivity-power-tools-and-cshtml-files/</link>
		<pubDate>Sat, 19 May 2012 21:57:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/2012/05/19/visual-studio-productivity-power-tools-and-cshtml-files/</guid>
		<description></description>
		<content:encoded><![CDATA[Ever since I installed the Productivity Power Tools extension for Visual Studio, it's like Visual Studio randomly forgets how to handle certain keys when I'm editing CSHTML files. I've noticed it mostly with the arrow keys, PgUp, PgDn, Home, End, Delete and Backspace. I hit the key, and nothing happens. If I close the tab and re-open the file, then it seems to work correctly.<br><br>I did a quick search but couldn't find anything like what I'm experiencing. Has anyone else had this happen? If so, leave me a comment!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2012-05-19 21:57:00</wp:post_date>
		<wp:post_date_gmt>2012-05-19 21:57:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>visual-studio-productivity-power-tools-and-cshtml-files</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-mvc-3"><![CDATA[ASP.NET MVC 3]]></category>
		<category domain="category" nicename="visual-studio"><![CDATA[Visual Studio]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[codeschreiber.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[Tim Schreiber]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2012/05/visual-studio-power-tools-and-cshtml.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_blogger_self</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.blogger.com/feeds/8015211951449396606/posts/default/695478727945337972]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducing YamORM</title>
		<link>http://hosting.bizinix.com/timschreiber/2012/04/15/introducing-yamorm/</link>
		<pubDate>Sun, 15 Apr 2012 07:16:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/2012/04/15/introducing-yamorm/</guid>
		<description></description>
		<content:encoded><![CDATA[I've been using ORMs for a long time - Entity Framework since it debuted in 2008, and NHibernate for a couple years before that. They have long been my preferred means of data access and facilitators of Domain Driven Design. LINQ is amazing, deferred execution is amazing, lazy loading is amazing - but they all come at the price of bloat, nasty generated SQL, and poor performance.<br><br>Enter the micro-ORM: a tool that offers a subset of ORM functionality, that is blazingly fast. There are a few available for .NET, and I've checked out <a href="https://twitter.com/#!/samsaffron" target="_blank">Sam Saffron</a>'s Dapper (<a href="http://code.google.com/p/dapper-dot-net/" target="_blank">Google Code</a> | <a href="https://github.com/SamSaffron/dapper-dot-net" target="_blank">GitHub</a>) and <a href="https://twitter.com/#!/robconery" target="_blank">Rob Conery</a>'s <a href="https://github.com/robconery/massive" target="_blank">Massive</a>.<br><br>Dapper is fast - really fast.  It can map POCOs to and from queries nearly as fast (as in within a couple of a milliseconds) as raw ADO.NET. It is able to achieve such stellar performance by using DynamicMethods and emitting IL code at runtime to handle populating objects and query parameters. <span>It's so fast and amazing that I plan to propose it to my current client as an option for our next project.</span><br><span><br></span><br><b><i><span><u>UPDATE</u>: My client is using Dapper on that project! :-)</span></i></b><br><br>Massive is cool - really cool. It dispenses with POCOs and instead makes heavy use of the dynamic type and Expando objects in .NET 4 to return query results, and it's nearly as fast as Dapper. But my opinion is that Rob Conery pushed the envelope so hard with his use of dynamics, that it feels more like an experiment than something anyone would actually use.<br><br>I really wanted to use Dapper in some of my side projects, but there's a problem. Because of its dynamic runtime code generation, Dapper won't run under partial trust; and almost all of my side projects live on a medium-trust host. Bummer. NHibernate won't work either. Entity Framework is supposed to work, but it seems a little like swatting a fly with a sledgehammer. What I needed was a micro-ORM that worked under partial-trust - so I wrote one.<br><br><b><span>Introducing YamORM</span></b><br><i>"<b>Y</b>et <b>A</b>nother <b>M</b>icro-<b>ORM</b>"</i><br><br>YamORM is a micro-ORM for .NET that simplifies mapping objects to and from SQL queries and provides shortcuts for common CRUD functionality, without all the bloat, oatmeal SQL, and performance issues of a full-scale ORM. It was designed to be fast, simple and straightforward, to support multiple database providers, and to run flawlessly in partial trust environments.<br><br>It features your choice of auto-mapping or a fluent interface for mapping objects to data, clean SQL generation, stored procedure support, parameterized query support, and transaction support. It currently works with SQL Server and MySQL.<br><br>You can check it out on GitHub, along with some code samples at: <a href="https://github.com/codeschreiber/YamORM" target="_blank">https://github.com/codeschreiber/YamORM</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2012-04-15 07:16:00</wp:post_date>
		<wp:post_date_gmt>2012-04-15 07:16:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-yamorm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="micro-orms"><![CDATA[Micro-ORMs]]></category>
		<category domain="category" nicename="yamorm"><![CDATA[YamORM]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[codeschreiber.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[Tim Schreiber]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2012/04/introducing-yamorm.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_blogger_self</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.blogger.com/feeds/8015211951449396606/posts/default/3032318239026386315]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>My First Randori</title>
		<link>http://hosting.bizinix.com/timschreiber/2012/04/07/my-first-randori/</link>
		<pubDate>Sat, 07 Apr 2012 19:24:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/2012/04/07/my-first-randori/</guid>
		<description></description>
		<content:encoded><![CDATA[In the second meeting of the Utah Software Craftsmanship group that I attended, <a href="http://blog.softwareontheside.com/" target="_blank">Mike Clement</a> presented on Randori: Group Practice.  Randori is a term used in Japanese martial arts to describe free-style practice.  The term literally means “chaos taking” or “grasping freedom,” implying a freedom from the structured practice of kata.  Randori may be contrasted with kata, as two potentially complementary types of training. <br><br>Kata is a Japanese word describing detailed choreographed patterns of movements practiced either solo or in pairs. A code kata is an exercise in programming which helps a programmer hone their skills through practice and repetition.  Dave Thomas has published many katas at <a href="http://codekata.pragprog.com/codekata" target="_blank">http://codekata.pragprog.com/codekata</a>. <br><br>Where kata is primarily an individual exercise, Randori is a team exercise, and Mike does a great job at explaining it on his blog: <a href="http://blog.softwareontheside.com/2012/03/utah-code-camp-spring-2012-slide-decks.html" target="_blank">http://blog.softwareontheside.com/2012/03/utah-code-camp-spring-2012-slide-decks.html</a>. <br><br>The 11 or 12 of us in attendance performed the Numbers to LCD kata from Mike’s <a href="http://www.slideshare.net/mdclement/randori" target="_blank">slide deck</a> and <a href="https://github.com/mdclement/NumbersToLcdRandoriBase" target="_blank">starter project</a>.  It was interesting to see the direction the pairs took as we rotated through the audience.  First, there were tests for each digit and multi-digits, along with a bunch of if..else if..else statements to translate the integer into the string representation of the LCD.  Then someone refactored the if..else if..else statements into a switch statement.  Then someone streamlined testing with [Setup] and [TestCase].  Then my navigator and I refactored the switch to a Dictionary.  Finally, after much trial and error, we arrived at the obvious answer staring us in the face the whole time: indexing through the string representation of the LCDs. <br><br>It was yet another example of how we as software developers tend to overcomplicate the problem upon first analysis, and even though I strive for simplicity in software, my Dictionary solution was unnecessarily complex in comparison to the final result.  But the value we gained from the exercise had nothing to do with what ended up producing.  Instead, it was the activity of producing it that proved to be of most value.  And seeing how my peers approached the problem provided a ton of insight that I would otherwise have missed on my own. Last night’s exercise was not only my first introduction to Randori, but also to Code Kata in general.  I intend to learn more and start applying the principles of code practice in my individual professional development.  I’m also thinking about conducting a couple of STG brown bags on Code Kata and Randori.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2012-04-07 19:24:00</wp:post_date>
		<wp:post_date_gmt>2012-04-07 19:24:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-randori</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="code-practice"><![CDATA[Code Practice]]></category>
		<wp:postmeta>
			<wp:meta_key>blogger_blog</wp:meta_key>
			<wp:meta_value><![CDATA[codeschreiber.blogspot.com]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_author</wp:meta_key>
			<wp:meta_value><![CDATA[Tim Schreiber]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>blogger_permalink</wp:meta_key>
			<wp:meta_value><![CDATA[/2012/04/randori-group-practice.html]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_blogger_self</wp:meta_key>
			<wp:meta_value><![CDATA[https://www.blogger.com/feeds/8015211951449396606/posts/default/8528085443500180859]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Welcome to my New, Improved Whatever-This-Is</title>
		<link>http://hosting.bizinix.com/timschreiber/2013/07/28/welcome-to-my-new-improved-whatever-this-is/</link>
		<pubDate>Mon, 29 Jul 2013 02:39:08 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Welcome to the brand spankin’ new timschreiber.com. I’ve been using WordPress for some side projects lately and decided it was a great time to consolidate my blog and résumé sites into one. Not a lot has changed in terms of content, except for my new homepage. You should go check it out if you haven’t already. Other than that, there’s my blog and my résumé, and that’s pretty much it.</p>

<p>I know I promised last year to start posting again once things calmed down, and now I intend to do just that. Nine months after I picked my family up and moved us halfway across the United States from Utah to Kentucky, we are finally settling into what I believe has become our new normal. Okay, maybe we might have been settled for a while, but... whatever.</p>

<p>At work, my project is suffocating under a mountain of technical debt that has accumulated over its nine year history, which led me to tweet the following question yesterday:</p>

<blockquote class="twitter-tweet"><p>I know Refactor &gt; Rewrite, but is there a point at which you accrue enough technical debt that you declare bankruptcy and start over?</p>&mdash; Tim Schreiber (@tim_schreiber) <a href="https://twitter.com/tim_schreiber/statuses/361330768972234753">July 28, 2013</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>I’m still reading and considering a great many things, but that will be the topic of my next post, and apparently my job, for the foreseeable future.</p>

<p>See you soon!</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2013-07-28 22:39:08</wp:post_date>
		<wp:post_date_gmt>2013-07-29 02:39:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>welcome-to-my-new-improved-whatever-this-is</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Things You Should (Almost) Never Do, Part I</title>
		<link>http://hosting.bizinix.com/timschreiber/2013/07/29/things-you-should-almost-never-do-part-i/</link>
		<pubDate>Tue, 30 Jul 2013 02:20:30 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[As I mentioned before, I’ve been thinking a lot about the point , if it even exists, at which a project has accrued enough technical debt that it just makes sense to cut your losses and start over. Of course, required reading for anyone considering refactor vs. rewrite is Joel Spolsky’s <a href="http://www.joelonsoftware.com/articles/fog0000000069.html" target="_blank">“Things You Should Never Do, Part I”</a> article, in which he posits the single worst strategic mistake you can make on a software project is to rewrite the code from scratch. If you haven’t read the article, stop and read it now. You’ll be glad you did.

I respect Mr. Spolsky a great deal, but one paragraph in his article is really causing me a little heartburn, because I think it oversimplifies a situation that my project at work is currently facing:
<blockquote>The idea that new code is better than old is patently absurd. Old code has been used. It has been tested. Lots of bugs have been found, and they've been fixed. There's nothing wrong with it. It doesn't acquire bugs just by sitting around on your hard drive. Au contraire, baby! Is software supposed to be like an old Dodge Dart, that rusts just sitting in the garage? Is software like a teddy bear that's kind of gross if it's not made out of all new material?</blockquote>
If there’s one thing I’d like to say to Mr. Spolsky right now it’s, “Thank you, thank you for using the Dodge Dart analogy.” Not only am I a huge Mopar fan, but it just so happens that Dodge resurrected the Dart as an all-new, redesigned “from scratch” model in 2013 (actually, they just did a custom implementation of a vehicle platform from Fiat). See where I’m going with this? Old vs. new, rusted vs. shiny…
<p style="text-align: center;"><img alt="" src="http://hosting.bizinix.com/timschreiber/wp-content/uploads/sites/8/2013/07/OldNewDart.jpg" /></p>
I completely agree with Mr. Spolsky that software won’t acquire bugs just sitting around on your hard drive, but then an old Dodge Dart won’t “rust just sitting in the garage” <i>if it’s taken care of properly</i>. Similarly, I’ve seen plenty of software fall apart because it was left out in the elements without proper maintenance.

And that’s the first point I want to make: Businesses cut budgets for software systems that appear to be functioning at an arbitrary minimum level of reliability. Competent, expensive senior-level developers are replaced by cheaper junior programmers. Invariably, things go wrong, enhancements are required; and whether through inexperience or apathy, their once beautiful, shiny software gradually becomes – well, this:
<p style="text-align: center;"><img alt="" src="http://hosting.bizinix.com/timschreiber/wp-content/uploads/sites/8/2013/07/cardboard-tank.jpg" /></p>
Is it possible to strip away the cardboard and duct tape and return the car to its pristine working condition? Of course! With enough time, money, and effort, I believe anything is possible; but therein lays my second point: it’s impossible to remove the all the crap and rot, and refactor all the bad code without losing at least some of the features, fixes, and knowledge that have accumulated over time – at least on a budget and timeline the business is happy with.

A recent <a href="http://dsc.discovery.com/tv-shows/fast-n-loud/season-2-episodes4.htm" target="_blank">episode</a> of the Discovery Channel’s <i>Fast ‘n Loud</i> comes to mind. Richard Rawlings and Aaron Kaufman from Gas Monkey Garage bought a 1964 Dodge Sweptline pickup truck in pretty rough shape for $750, and turned it into something better than the original, but all did not go smoothly. They ripped out the original front end and were forced to make some major, expensive frame modifications to get a front end from a Ford Crown Victoria to fit. Similarly, they used an engine and transmission from a modern Chevrolet Tahoe, which caused all kinds of mounting difficulties and required the steering to be custom built. And whether by choice or by budget, they just sanded and clear coated the rather rough looking exterior instead of giving it a shiny new paint job. The price for the final result? Just shy of $50,000.

<p style="text-align: center;"><img alt="" src="http://hosting.bizinix.com/timschreiber/wp-content/uploads/sites/8/2013/07/dodge_hodge_podge.jpg" /></p>

The performance of the “Dodge Hodge Podge,” as they call it, is quite impressive; but in my opinion, it still looks like a rusted out piece of crap. Lacking many of the features, comforts, and conveniences that have become expected – if not required – in today’s market, it is nothing more than a very exciting novelty. And that brings me to my third and final point: the passage of time in the real world will eventually render even the best designed and implemented software systems obsolete.

As software developers, we live in a world where the only constant is change. Technologies progress, frameworks evolve, patterns found, and best practices appear. And then there’s Microsoft. In the early days of .NET, they developed what I can only describe as anti-patterns and anti-practices and published them on MSDN as their holy gospel. Bloggers and tutorial websites picked up on it; and before long, a whole generation of web developers was learning how to program by spreading application logic across all the Page_Load and Button_Click event handlers in their CodeBehind classes.

There are many other examples in many different languages and frameworks and projects, but my point is this: what seem like good decisions in an early in the game almost always come back to bite us later, and unless the business makes sure the project stakeholders and developers are well-funded, and unless everyone involved in the project stays 100% vigilant, eventually the fast paced technological world passes up the old software system. The problem is that once the business decides a product is stable or performant enough, the money dries up and it becomes impossible to keep it from becoming obsolete. The attitude that old code is good enough because it works, as Mr. Spolsky asserts, only exacerbates the problem.

So what to do? That’s what I’m trying to figure out. I don’t necessarily want to rewrite the project I inherited at work, but I’m thinking I might have to. Our data layer is buggy, generated by an in-house tool we no longer have the source code for, and based on antiquated ADO.NET DataSets. It needs to be completely redesigned and rewritten, with a requirement from above that we move to Entity Framework. Our business logic layer is tightly coupled to our data access layer, and huge swaths of code will have to be rewritten to accommodate the new data layer. The service layer was written by someone who obviously didn’t understand SOAP. For some reason, someone thought passing objects as XML string parameters in WebMethods and serializing/deserializing them on both ends was a good idea – nope, but now the presentation layer needs a reference to the business layer to work. There are many other facets that need help as well.

With such a mess of tightly coupled, poorly executed code, does it still make sense to keep what we have just because it works? Do we do the “Dodge Hodge Podge” thing to our software and hope that our incremental changes and improvements don't take forever and leave us with sticker shock in the end? Like I mentioned before, are we at the tipping point at which we've accrued so much technical debt that it just makes more sense to cut our losses and start over with fresh, new code? Should the "Things You Should Never Do" be renamed "Things You Should <em>Almost</em> Never Do?"

UPDATE: I just had a thought that if the project had been initiated with incremental improvement in mind, then incrementally improving it would be easier to swallow. But every time I turn around, there's some new roadblock or missing source code or whatever standing in my way. A commenter advised to be prepared for the pain, but I'm in pain either direction I go. I just need to choose the option with the least amount of it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2013-07-29 22:20:30</wp:post_date>
		<wp:post_date_gmt>2013-07-30 02:20:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>things-you-should-almost-never-do-part-i</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Is there a point at which a project has accrued enough technical debt that you give up incremental refactoring and cut your losses with a full rewrite?]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[Bressain Dinkelman]]></wp:comment_author>
			<wp:comment_author_email>dinkelburt@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dinkelburt.com</wp:comment_author_url>
			<wp:comment_author_IP>66.43.16.227</wp:comment_author_IP>
			<wp:comment_date>2013-07-30 14:53:43</wp:comment_date>
			<wp:comment_date_gmt>2013-07-30 18:53:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I would say almost never. Just be ready for the pain if you do the rewrite. I found this article to be particularly helpful if you're thinking of rewriting.

http://onstartups.com/tabid/3339/bid/97052/How-To-Survive-a-Ground-Up-Rewrite-Without-Losing-Your-Sanity.aspx]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Tim]]></wp:comment_author>
			<wp:comment_author_email>tim.schreiber@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>205.204.248.84</wp:comment_author_IP>
			<wp:comment_date>2013-07-30 15:08:57</wp:comment_date>
			<wp:comment_date_gmt>2013-07-30 19:08:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Maybe pain is the determining factor, because in my case, either option is going to be painful. Maybe I should figure out which option will be more painful and avoid it. Thanks for the article. I'll add it to the heap that I'm reading before I give my recommendation to the project stakeholders next week. From what little I skimmed, though, it seems like the recommended way to do a rewrite is to do it incrementally. :/]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>4</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>You Keep Writing That Code. I Do Not Think It Does What You Think It Does.</title>
		<link>http://hosting.bizinix.com/timschreiber/2013/10/14/you-keep-writing-that-code-i-do-not-think-it-does-what-you-think-it-does/</link>
		<pubDate>Mon, 14 Oct 2013 18:37:21 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[Dear unknown previous programmer,

Good for you that you used a StringBuilder. Bad for you that you completely missed the point of using a StringBuilder. Worse for you that you're concatenating SQL like this.
<pre>StringBuilder NDCRecord = new StringBuilder("Insert into [NDCData] (NDCNumber, NDCDrugName, NDCStrength, NDCFormCode, NDCDEAClass, NDCMeasure, NDCTherapeuticCode, NDCPreviousNDC, NDCGenericCode, NDCGenericName, NDCMDDBTransactionCode, NDCMDDBItemStatusFlag) " +
    " values ( " 
    + "'" + lsNDC_Num + "' , " 
    + "'" + lsNDC_Drug_Name + "', "
    + "'" + lsNDC_Strength + "', " 
    + "'" + lsNDC_FormCode + "', " 
    + "'" + lsNDC_DEAClass + "', "
    + "'" + lsNDC_Measure + "', "
    + "'" + lsNDC_Therapeutic_Code + "', "
    + "'" + lsNDC_Previous_NDC + "', " 
    + "'" + lsNDC_Generic_Code + "', " 
    + "'" + lsNDC_Generic_Name + "', "
    + "'" + lsNDC_MDDB_Transaction_Code + "', " 
    + "'" + lsNDC_MDDB_Item_Status_Flag +"' )" );</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2013-10-14 14:37:21</wp:post_date>
		<wp:post_date_gmt>2013-10-14 18:37:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>you-keep-writing-that-code-i-do-not-think-it-does-what-you-think-it-does</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[you-keep-writing-that-code-i-do-not-think-it-means-what-you-think-it-means]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Beware the StackOverlords</title>
		<link>http://hosting.bizinix.com/timschreiber/2013/10/30/beware-the-stackoverlords/</link>
		<pubDate>Wed, 30 Oct 2013 20:37:33 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=84</guid>
		<description></description>
		<content:encoded><![CDATA[<h2><b>or, Why StackOverflow Sucks</b></h2>
<em style="font-size: 8pt;">This probably isn't the best written post I've ever done, but it's what's been on my mind. Also dammit Jim, I'm a coder - not a writer.</em>

I used to think StackOverflow was awesome. <i>Used to.</i> But now, not so much. No, now it’s pretty much ruled by the early adopters, many of whom don’t bother asking or answering questions anymore, but rather sit on their asses and rack up massive reputation from remedial questions they answered five years ago. And with that massive reputation comes elevated privileges, which they ruthlessly wield against newbie scum to protect their standing as the StackOverlords of the Q&amp;A empire.

At least it seems like that sometimes. Sure, it’s a little dramatized, but it points out some glaring systemic failures the StackOverflow folks are refusing to address:
<h3><b>Damned if you do, damned if you don’t</b></h3>
The gamification of StackOverflow encourages users to build reputation points and earn badges by asking and answering questions. Imagine for a moment that you are a new StackOverflow user. You can’t ask questions that have been asked and answered before, any broad or open-ended question, or try to solicit opinions or anything like that – even if it will help you learn and grow as a programmer. No, if you do, then the StackOverlords will smack you down with down-votes, flags, closing your question, deletion, and all other manner of other moderator nastiness. And we’re not talking over a period of time – it’s going to happen in <i>seconds</i>. So, you aren’t going to earn any reputation or badges by asking questions.

Okay, so you can get started by answering questions. Nope. Many new users like you are new not only in terms of StackOverflow membership, but also as programmers in general. More often than not, the questions you are capable of answering have already been answered by someone else. No point in expending a ton of effort on something that’s already been done, amiright? You might be able to catch a few duplicate questions as they flow into the site and provide answers before a StackOverlord kills them, but when it’s all said and done, you’re not really earning any reputation answering questions, either.

The problem is that reputation is the key to gaining privileges on StackOverflow. Without it, you can basically only ask and answer questions. But as a newbie, you can’t really gain reputation by asking and answering questions.
<h3><b>StackOverlords are assholes</b></h3>
Yep, I said it. And I’m not the only one. There are many questions and discussions on meta.stackoverflow.com that point out the problem with rudeness on StackOverflow: <a href="http://meta.stackoverflow.com/search?q=rude" target="_blank">here</a>, <a href="http://meta.stackoverflow.com/questions/191029/general-attitude-stack-overflow-non-constructive-attitude-rather-than-constru">here</a>, <a href="http://meta.stackoverflow.com/questions/161539/rude-responses-from-the-community" target="_blank">here</a> and <a href="http://meta.stackoverflow.com/search?q=rude">more</a>.  Read the comments on <a href="http://sergworks.wordpress.com/2012/09/26/why-stackoverflow-sucks/">this blog post</a>. If it’s beginning to seem like the StackOverlords are a bunch of old-timers yelling at the newbie kids to stay the hell of their lawn, you wouldn’t be too far off.
<h3><b>StackOverlords are hypocrites</b></h3>
A StackOverlord once told me that StackOverflow is not a game, that rushing to build reputation is meaningless. Bullshit. If StackOverflow isn’t a game, then why they hell did they gamify it with points and badges?  And if reputation is so meaningless, why did Chief-StackOverlord-in-Charge Joel Spolsky say (and I quote), “Spend a few months earning a five digit Stack Overflow reputation, and you'll be getting job offers in the $100K+ range without an interview” (go ahead, <a href="http://programmers.stackexchange.com/questions/20369/career-advice-stay-with-php-or-start-a-new-career-in-something-else-net/20373#20373">check my source</a>)? They obviously think reputation is more than they want you to believe.
<h3><b>StackOverlords think StackOverflow is something it’s not</b></h3>
I’ve heard (read) StackOverlords opine that users are using StackOverflow as their first resort for solving problems, when it should really be their last. That means they expect users to thoroughly research their issues and try to solve them on their own first; which is fine, I guess. Except that StackOverflow’s mission is to become the best collection of concise programming questions and answers – no discussions or opinions allowed, just “if your problem is <i>x</i>, then your answer is <i>y</i>.” But doesn’t that create the very thing they’re trying to avoid? When Google a particular problem, and the first result is that problem asked and answered on StackOverflow, hasn’t it just become your option of first resort? Regardless of what the StackOverlords <i>want</i> it to be, it has become something else.
<h3><b>So…</b></h3>
I used to think StackOverflow was interested in helping users become better programmers. When they say they want to be the best collection of programming questions and answers, that’s what I think any rational human being would think. But that’s just not the case. Since their massive venture capital infusion, they are only interested in revenue generated by ads and sponsorships driven by their content. Actually, it’s not even <i>their</i> content – it’s yours, and everyone else’s who participates. Now, all of a sudden, the hostile patrolling of questions and answers and the pedantic bullying of their users makes sense. They’ve <i>got</i> to protect the all-important content. That’s fine. It’s their site.

I guess I’m just more interested in becoming a better programmer and helping others become better programmers. I’m more interested in treating people the way I’d like to be treated. So maybe StackOverflow isn’t the place for me after all.

I’ll close with a comment from the blog post I mentioned earlier. Stack Overflow: “Technocrat’s heaven, thinking man’s hell.”]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2013-10-30 16:37:33</wp:post_date>
		<wp:post_date_gmt>2013-10-30 20:37:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>beware-the-stackoverlords</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>52</wp:comment_id>
			<wp:comment_author><![CDATA[Andy]]></wp:comment_author>
			<wp:comment_author_email>aw2010@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://otakucms.com</wp:comment_author_url>
			<wp:comment_author_IP>60.47.133.172</wp:comment_author_IP>
			<wp:comment_date>2014-03-07 05:55:10</wp:comment_date>
			<wp:comment_date_gmt>2014-03-07 10:55:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Tim, interesting post. I am concerned that Stackoverflow seems to dominate my searches for coding information. I found that what works best for me is to understand the programming principles and derive my own solutions. And use a site like Stackoverflow for situations where I get stuck. I guess that modifying my search terms would help such as leaving out "how to".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394189710.866445064544677734375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1394224369.8575088977813720703125;s:7:"message";s:49:"TscWpAdmin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"TscWpAdmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>79</wp:comment_id>
			<wp:comment_author><![CDATA[Tim]]></wp:comment_author>
			<wp:comment_author_email>tim.schreiber@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.177.142.88</wp:comment_author_IP>
			<wp:comment_date>2014-11-11 15:00:55</wp:comment_date>
			<wp:comment_date_gmt>2014-11-11 20:00:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm not sure I follow you. This post wasn't about HTML at all.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>78</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415736055.8956620693206787109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"TscWpAdmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>80</wp:comment_id>
			<wp:comment_author><![CDATA[Tim]]></wp:comment_author>
			<wp:comment_author_email>tim.schreiber@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.177.142.88</wp:comment_author_IP>
			<wp:comment_date>2014-12-05 13:55:49</wp:comment_date>
			<wp:comment_date_gmt>2014-12-05 18:55:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Any more, I end my Google searches with "-site:stackoverflow.com" to exclude StackOverflow.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>52</wp:comment_parent>
			<wp:comment_user_id>1</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417805749.454535007476806640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"TscWpAdmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>81</wp:comment_id>
			<wp:comment_author><![CDATA[K. Chris C.]]></wp:comment_author>
			<wp:comment_author_email>kchrisc@connectedcomputer.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>189.167.13.153</wp:comment_author_IP>
			<wp:comment_date>2014-12-06 06:05:51</wp:comment_date>
			<wp:comment_date_gmt>2014-12-06 11:05:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good comment.

I was sitting here wondering why I rarely go to StackExchange/Overflow. I realized it was because of the nonsense by the moderators. I might just suppose that the quality is falling off due to the running off of recent members by rude and insane mods.

One has to ask questions to be able to gain points to be able to actually use the system. However, the mods attack just about any question not anointed by God.

So I just don't use the site, except if it comes up in a search.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1417863951.7765409946441650390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1418178695.864365100860595703125;s:7:"message";s:49:"TscWpAdmin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"TscWpAdmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>78</wp:comment_id>
			<wp:comment_author><![CDATA[jackn]]></wp:comment_author>
			<wp:comment_author_email>jack@Jacknorth.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.149.148.7</wp:comment_author_IP>
			<wp:comment_date>2014-10-20 12:49:50</wp:comment_date>
			<wp:comment_date_gmt>2014-10-20 16:49:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[StackOverlords generally know a little html, and HTML isn't programming. Hopefully; you see the problem.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1413823790.3558599948883056640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1415735906.6758830547332763671875;s:7:"message";s:49:"TscWpAdmin changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:10:"TscWpAdmin";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>My First Year as a SISsy</title>
		<link>http://hosting.bizinix.com/timschreiber/2013/11/05/my-first-year-as-a-sissy/</link>
		<pubDate>Tue, 05 Nov 2013 05:01:11 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>or, Why Pluralsight Is Awesome</h3>
No great big post here or anything. Just a status report that I've passed my first year as a SISsy (a.k.a. SIS employee), and as is common in the consulting world, I am coming up on the end of my first client engagement. On the horizon is a possible internal position in SharePoint development (among other opportunities). Except I don't know the first thing about SharePoint development. No worries, that's why I have my <a title="Pluralsight" href="http://pluralsight.com" target="_blank">Pluralsight</a> membership. I'll be making my way through their <a title="Pluralsight search results for: SharePoint 2010 Developer Ramp-Up" href="http://pluralsight.com/training/Courses/Find?highlight=true&amp;searchTerm=SharePoint+2010+Developer+Ramp-Up" target="_blank">SharePoint Developer Ramp-Up</a> courses over the next couple of weeks.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2013-11-05 00:01:11</wp:post_date>
		<wp:post_date_gmt>2013-11-05 05:01:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-first-year-as-a-sissy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Heating Your Home Office for Eight Pence a Day</title>
		<link>http://hosting.bizinix.com/timschreiber/2013/11/13/heating-your-home-office-for-eight-pence-a-day/</link>
		<pubDate>Wed, 13 Nov 2013 20:45:14 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[My cousin posted the following ridiculous video to my Facebook:

<iframe src="//www.youtube.com/embed/brHqBcZqNzE" height="315" width="560" allowfullscreen="" frameborder="0"></iframe>

My sister thought it was smart. I saw right through it.

My response:
<blockquote>Watch out, Imma lay down some SCIENCE!!

One tea light is 8.5 grams of wax. Assuming the wax is pure and has a typical calorific value of 8,400 joules per gram, and using the conversion of 1 joule = 0.0009478134 BTU, we can calculate that three tea lights produce 203.02163028 BTU (FYI, a British Thermal Unit, or BTU, is the amount of heat energy required to heat 55 cubic feet of air by one degree Fahrenheit).

My home office is twelve feet by 14 feet (which is fairly typical for home offices and bedrooms) and has an eight foot ceiling, which comes out to 1344 cubic feet. Now assuming an ice storm knocks out my electricity, and the outside temperature is 20 degrees; I need to raise my home office’s temperature by 40 degrees to reach a barely-livable temperature required for my survival. So that’s 1344 cubic feet times 40 degrees divided by 55, or 977 BTU.

Looks like Imma need more tea light heaters -- five total.

I do have to admit my example is flawed, though. It assumes a completely closed system – something that is impossible in real life. In reality, it takes about seven times as many BTU to maintain temperature in a well-insulated room like mine because of heat loss through the door, window, and walls.

So now I'm up to 35 tea light heaters. I hope I don't trip over them and catch my house on fire as I weave around my office getting stuff done. I don't want to know how many it would take to heat my whole house.

So long story short, the tea light and terracotta pot “heater” might feel nice and warm when you’re right up next to it, but its effect is negligible on your room.</blockquote>
Sometimes I wish people took science more seriously in high school.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2013-11-13 15:45:14</wp:post_date>
		<wp:post_date_gmt>2013-11-13 20:45:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>heating-your-home-office-for-eight-pence-a-day</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Bad Contractors Give Good Contractors A Bad Name</title>
		<link>http://hosting.bizinix.com/timschreiber/2014/03/07/bad-contractors-give-good-contractors-a-bad-name/</link>
		<pubDate>Fri, 07 Mar 2014 21:45:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=99</guid>
		<description></description>
		<content:encoded><![CDATA[Having spent the better part of a decade in software consulting, it's fair to say that although many of us are quite talented and actually give a shit about what we do, there are also those who have tarnished our reputation a bit. Demotivators like this exist for a reason:

[caption id="attachment_100" align="aligncenter" width="300"]<a href="http://hosting.bizinix.com/timschreiber/wp-content/uploads/sites/8/2014/03/consultingdemotivator.jpg"><img class="size-medium wp-image-100" alt="Consulting: If you're not part of the solution, there's good money to be made prolonging the problem." src="http://hosting.bizinix.com/timschreiber/wp-content/uploads/sites/8/2014/03/consultingdemotivator-300x211.jpg" width="300" height="211" /></a> Consulting: If you're not part of the solution, there's good money to be made prolonging the problem. Don't be that guy.[/caption]

<span style="font-size: 13px;">My company hired a Microsoft Gold Certified Partner to do some integration work between our Dynamics CRM 2011 system and some internal systems. I won't name names, but this particular company's consultants are generally recognized as experts in Dynamics development, and they have built quite a large practice around that particular technology offering. They even hold regular webinars about it.</span>

Then there's me, their client. My experience with Dynamics CRM started my first day on the job.

So, as I was perusing the source code for a couple of custom plug-ins they wrote for us, I saw a few hard-coded web service URLs in there. When I asked their CRM "expert" about it, he said it had to be that way because there were no <em>.config</em> files in Dynamics CRM like you would have in a typical .NET application. I thought it sounded fishy, but because I had a ton of stuff on my plate at the time, I just kinda let it be for the moment. Well, a few weeks went by, and I was again in the code trying to get a version ready for our new DEV environment. I remembered the conversation I had with the "expert" and thought there had to be a way.

There was. Seriously, a half minute of Google search turned up <a href="http://blogs.msdn.com/b/crm/archive/2008/10/24/storing-configuration-data-for-microsoft-dynamics-crm-plug-ins.aspx" target="_blank">this article</a>, which is exactly how you're supposed to pass configuration to your Dynamics CRM plug-ins. And it's functionality that's been available since at least version 4.0 (which came out well before the 2011 version we're using). Another half hour, and I had fixed, checked-in, and deployed. Now I'm looking at the project and wondering how much of the rest of the code is hacked together like that.

So, now that I've ranted about this company of "experts," I want to close by offering a public apology to any client that feels I haven't tried to be part of the solution. True, I don't know everything, but I don't pretend to be an "expert" either. I just do my work the best I know how, and I'm constantly striving to improve my skills and expand my knowledge.

And this feels like an awkward way to end. So anyway...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2014-03-07 16:45:00</wp:post_date>
		<wp:post_date_gmt>2014-03-07 21:45:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bad-contractors-give-good-contractors-a-bad-name</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[67]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[software contracting]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[Consulting: If you're not part of the solution, there's good money to be made prolonging the problem. Don't be that guy.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>How to Stop a Hung Windows Service</title>
		<link>http://hosting.bizinix.com/timschreiber/2014/03/14/how-to-stop-a-hung-windows-service/</link>
		<pubDate>Fri, 14 Mar 2014 23:00:08 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=103</guid>
		<description></description>
		<content:encoded><![CDATA[<h3>or, Remedial Windows Administration for Developers, Part Duh</h3>
I don't know what gods I've angered over my career, but I'm always finding myself in the position of picking up the pieces after an employee walks out or a vendor contract goes south. My current job is no exception. Our previous vendor wrote and deployed some Windows Services for some data synchronization functionality we need, but apparently didn't take the time to make sure they were stable.

Today, I needed to stop one of these rogue services on a server, and was horror-struck when I got "Error 1053: The service did not respond to the start or control request in a timely fashion." Now instead of being hung with a status of "Started," it was hung with a status of "Stopping," and stopping, and stopping, and stopping...

If it were just any old regular application, I could have easily gone into the Windows Task Manager and killed it, but it's not that easy with a Windows Service. I've never been a network administrator or operations engineer -- never really had much interest in it, so I was really stuck.

But then I found this "how-to" article and tried it: <a href="http://community.spiceworks.com/how_to/show/312-stop-a-hung-service" target="_blank">http://community.spiceworks.com/how_to/show/312-stop-a-hung-service</a>. What sorcery is this?! It worked -- things never work the first time I try them! So here's the steps in a nutshell:
<ol>
	<li><span style="line-height: 13px;"><span style="line-height: 13px;">Find the Process ID of the service by opening a command prompt and typing:
<span style="font-family: 'Courier New', courier;">sc queryex [SERVICENAME]
&lt;Enter&gt;</span>
(Replace <span style="font-family: 'Courier New', courier;">[SERVICENAME]</span> with the service's registry name).

</span></span></li>
	<li>Make note of the PID</li>
	<li>Run the following command to kill the hung process:
<span style="font-family: 'Courier New', courier;">taskkill /f /pid [PID]
&lt;Enter&gt;</span></li>
</ol>
Now I know. And knowing is half the battle.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>103</wp:post_id>
		<wp:post_date>2014-03-14 19:00:08</wp:post_date>
		<wp:post_date_gmt>2014-03-14 23:00:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>how-to-stop-a-hung-windows-service</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Fixing Stuff Requires Change, and Change Is Hard</title>
		<link>http://hosting.bizinix.com/timschreiber/2014/12/09/fixing-stuff-requires-change-and-change-is-hard/</link>
		<pubDate>Wed, 10 Dec 2014 02:33:00 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[Once upon a time, there was a software developer. Let’s call him – oh, I don’t know – “Jim.” Jim was brought on as a consultant at a large organization – let’s call it “Gub Mints” – to lead other developers and improve a flailing enterprise application called – hmmm – “Crapster.” Don’t ask me why Gub Mints needs has an application called Crapster, but they do.

Now, Crapster was originally developed in 2004 using .NET 1.1. Its original functionality was essentially just a Mechanical Turk. A user would login to the website and request some crap (like a report or whatever). That request would go into a queue which was monitored by real live people who would perform whatever work was necessary, and then fax the result back to the user. Everything was working as designed – except it wasn’t designed with scalability in mind.

Over time, more and more automation was added. The manual queue became an MSMQ queue that was monitored by a Windows Service. Users could get completed crap in seconds, and if they were too busy to do it themselves, they could appoint agents or delegates to do crap on their behalf. Crapster data was shared with other mint companies, and vice versa. And because extensibility wasn’t a design concern, all of this new functionality was just kinda tacked on without any big-picture concern.

For much of its life, Crapster was developed, enhanced, and maintained by a single low-cost developer – or rather a series of single, low-cost developers. Because of organizational issues at Gub Mints, only contractors were used on Crapster, so turnover was atrocious and any knowledge that was passed down between developers was incomplete at best. And because developers 1) cheap and 2) working alone, liberties were taken with the code that a team and code reviews would have otherwise prevented. Despite its challenges, Crapster still worked, albeit in a more and more fragile state with every little change or enhancement. Eventually, the overall scheme of things became so clouded by the problems and lack of knowledge, that no one actually understood Crapster anymore.

Crapster slowly decayed until 2012. That’s when Gub Mints made some changes that would increase the user base and overall load on Crapster by an order of magnitude. Sure enough, stuff broke under the increased load. Some stuff was deemed unnecessary or able to be worked around by real live people and was deactivated. Other stuff received just enough maintenance to keep it limping on. And more stuff was still being added at the request of Gub Mints management. But as a whole, the application was failing.

Gub Mints looked for another contractor to take the reins and turn the Crapster train wreck around. After searching high and low, they found Jim. Throughout his career as a software consultant, Jim kinda specialized in helping turn around failing projects. “Fix it,” they said.

Faced with the daunting task of fixing Crapster, Jim spent weeks discovering and carefully evaluating the technological, process, and organizational aspects of the project. He carefully documented what was working, what needed help, and presented a plan to modernize the application and improve its extensibility and scalability.

The Gub Mints management’s reaction caught Jim off guard: “We didn’t tell you to analyze it. We told you to fix it.”

“I have to know what to fix before I can fix it,” replied Jim.

“We’ll tell you what to fix. You can start with the timeout issues.”

“I addressed the timeout issues on page xx, and you can see they’re the result of the application not being designed for scalability. Fixing it would require—“

“Just get it working.”

At this point, it became painfully clear to Jim what Gub Mints <i>really</i> wanted. They wanted the status-quo; they didn’t want anything to actually change; they didn’t really want Crapster fixed. They wanted a Band-Aid. They wanted him to “just get it working.” They wanted him to “Git-R-Done!”

Fast forward – say – ten or eleven months. Jim has accomplished only a few things he was hired to do. He hasn’t been sitting around doing nothing. On the contrary, he’s got the application running more stable under the higher load. There were still problems that popped up from time to time, but the Help Desk and Operations teams handled those like they always had. The bulk of his time was taken up propping up the failing application to make it <i>seem</i> stable because he wasn’t allowed to <i>actually make</i> it more stable. And when he wasn’t putting out fires or chasing ghosts, he was handling major enhancements that were being rammed through. In fact, at the end of it all, he was only able to fit in a few <i>actual</i> minor improvements.

The Gub Mints management went to Jim and said, “You had a year to fix Crapster. What have you been doing?”

“I’ve been propping it up because you wouldn’t let me actually fix it,” replied Jim.

“We hired you to fix it.”

“You threw every conceivable obstacle in my way and told me to just get it working, and that’s what I did.”

“But you didn’t fix it.”

“No, I spent all my time putting out fires, chasing ghosts, and implementing your enhancements because you wouldn’t let me actually fix anything.”

“But we wanted—“

It could have gone on and on, but it didn’t. Gub Mints and Jim eventually parted ways, not under the best circumstances. If the conversation had been allowed to continue, however, Jim would have responded like this:

“You <i>think</i> you wanted Crapster fixed, but what you <i>really</i> wanted was more status quo.”

The moral of the story is that fixing stuff requires change, and change is hard. Failing to understand that makes life difficult for everyone. Jim has moved on to another project and is happy and productive. Gub Mints and Crapster are just a bad memory. But Gub Mints is stuck with the same problems, the same attitudes; and are no doubt dragging yet another hapless contractor through the same broken machine – all because they <i>think</i> they want something they don’t actually want: “change.”

The end.

<i>DISCLAIMER: All persons, organizations, products, and/or events in this work are fictitious. Any resemblance to real persons (living or dead), organizations, products and/or events is purely coincidental.</i>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2014-12-09 21:33:00</wp:post_date>
		<wp:post_date_gmt>2014-12-10 02:33:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>fixing-stuff-requires-change-and-change-is-hard</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Persistence-Ignorant ASP.NET Identity with Patterns (Part 1)</title>
		<link>http://hosting.bizinix.com/timschreiber/2015/01/14/persistence-ignorant-asp-net-identity-with-patterns-part-1/</link>
		<pubDate>Wed, 14 Jan 2015 23:33:27 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=129</guid>
		<description></description>
		<content:encoded><![CDATA[<em>This series of posts requires a functional understanding of ASP.NET Identity 2.x. If you haven’t had at least some kind of exposure, this is a good place to start: <a title="ASP.NET Identity" href="http://www.asp.net/identity" target="_blank">http://www.asp.net/identity</a>.</em>

ASP.NET Identity is the successor to ASP.NET Simple Membership, which itself was a short-lived successor to the venerable ASP.NET Membership introduced with .NET 2.0. Microsoft’s <a title="Introduction to ASP.NET Identity" href="http://www.asp.net/identity/overview/getting-started/introduction-to-aspnet-identity" target="_blank">Introduction to ASP.NET Identity</a> article says this new identity management framework is the result of developer feedback and solves a long list of problems including flexible schema, external logins, testability, and support for different persistence mechanisms -- going as far to say they’re “easy to plug in.”
<h3>The Problem</h3>
What they neglect to say is all that testability and persistence ignorance flies right out the window when you create a new ASP.NET Web Application using the MVC template and “Individual User Accounts” authentication. What you get is a single-layered application, tightly coupled to Entity Framework, that:
<ul>
	<li>Ignores the patterns that facilitate testing, including: the repository pattern, unit of work pattern, and dependency injection;</li>
	<li>Forces you to implement their IUser interface in your application’s User entity, thereby coupling it to ASP.NET Identity;</li>
	<li>Eliminates any clear separation between your entities, persistence concerns, and business logic. Persistence ignorance? Forget about it.</li>
</ul>
Thankfully, due to the extensibility designed into ASP.NET Identity, it is possible to ditch the reference to the <span style="font-family: 'Consolas','Courier New';">Microsoft.AspNet.Identity.EntityFramework</span> assembly and write a custom implementation that can address these and other architectural issues. Just be forewarned: it is not a trivial undertaking, and you’ll have to put up with some code smell that is baked into the <span style="font-family: 'Consolas','Courier New';">Microsoft.AspNet.Identity.Core</span> assembly.

The most off-putting smell is the core <span style="font-family: 'Consolas','Courier New';">UserManager&lt;TUser&gt;</span> class, which at first glance doesn’t seem to be that big of a problem. Sure, it’s a behemoth, 663 line <a title="God object" href="http://en.wikipedia.org/wiki/God_object" target="_blank">God class</a> that acts as the gateway for all identity management functionality in ASP.NET Identity, but since it’s just an implementation detail baked into the core assembly, you don’t really have to worry about it, right? Yeah, not so much.

<span style="font-family: 'Consolas','Courier New';">UserManager&lt;TUser&gt;</span> has a single dependency on <span style="font-family: 'Consolas','Courier New';">IUserStore&lt;TUser&gt;</span>, which doesn’t look like a problem at first glance…

<script src="https://gist.github.com/timschreiber/6bc5278183f4857e85b9.js"></script>

…until you discover all the hidden dependencies. As it turns out, if you want password support, <span style="font-family: 'Consolas','Courier New';">UserManager&lt;TUser&gt;</span> also requires an <span style="font-family: 'Consolas','Courier New';">IUserPasswordStore&lt;TUser&gt;</span>. And where does it go looking? Here:

<script src="https://gist.github.com/timschreiber/0d6135df9a0a7ff6ac4d.js"></script>

So now your implementation of <span style="font-family: 'Consolas','Courier New';">IUserStore&lt;TUser&gt;</span> also has to implement <span style="font-family: 'Consolas','Courier New';">IUserPasswordStore&lt;TUser&gt;</span>. If you want to support external logins, claims, security stamps, and roles, the class definition for your implementation is going to look something like this:

<script src="https://gist.github.com/timschreiber/0840a42c9ad19d41e5b1.js"></script>

Yep, the <span style="font-family: 'Consolas','Courier New';">UserManager&lt;TUser&gt;</span> God class requires yet another God class to handle the data access for everything membership -- and this one is all yours. Mine is a whopping 603 lines of awesomeness. And to make it extra-special, there is no way around it! So when I said you’d have to put up with some code smell, I wasn’t kidding. Luckily, this is the worst of it.

<h3>The Solution</h3>
I didn't just write all that to convince you not to use ASP.NET Identity. On the contrary, you <em>need</em> to use it - just don't do it the way Microsoft apparently wants you to. Follow patterns instead! So let's start putting together some of the high-level requirements for a project where we're doing it right.
<h4>Functional Requirements</h4>
For the purposes of this tutorial, this application must possess all of the functionality you would get from an application created from the default ASP.NET MVC 5 web application template with “Individual User Accounts” authentication.
<h4>Technical Requirements</h4>
<h5>Persistence Ignorance</h5>
Fundamentally, persistence ignorance means that your entities shouldn’t care about how they’re stored, created, retrieved, updated, or deleted. Instead you just focus on modeling the business domain. The purpose of this post is not to explain persistence ignorance or Domain-Driven Design or try to convince you why you should use them, but if you’d like to know more, this is a good article: <a title="Domain Driven Design - Clear Your Concepts Before You Start" href="http://www.codeproject.com/Articles/339725/Domain-Driven-Design-Clear-Your-Concepts-Before-Yo" target="_blank">Domain Driven Design - Clear Your Concepts Before You Start</a>.

For the purposes of this application, I am going to use persistence ignorance with an assumption that we’re using an ORM that supports lazy loading of related objects and collections through the use of dynamic proxies, which does make a couple of small difference in the code (but they’re good differences):
<ul>
	<li><span style="line-height: 13px;">Our entity classes must not be sealed, must have a default constructor, and all public navigation properties must be virtual.
</span></li>
	<li>We’ll be able to take advantage of lazy loading of related objects and collections (in the UserStore methods for example).</li>
</ul>
<h5>Proper Layering</h5>
The concept of “proper layering” is highly subjective. At the very least, that means presentation is isolated from data access by an intermediate core logic layer. I’ll cover the layering of this application in Part 2 when we set up the Visual Studio Solution.
<h5>Patterns</h5>
As I’ve mentioned before, this application will follow some important architectural patterns, including repository, unit of work, and dependency injection. The purpose of this post is not to explain what these patterns are or why you should use them, but I will provide links to more information about these patterns how to use them:
<ul>
	<li><a title="P of EAA: Repository" href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank"><strong>Repository</strong></a> - specifically the use of generic repositories based on <a title="Implementing the Repository and Unit of Work Patterns in an ASP.NET MVC Application (9 of 10)" href="http://www.asp.net/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">this example</a>.</li>
	<li><a title="P of EAA: Unit of Work" href="http://martinfowler.com/eaaCatalog/unitOfWork.html" target="_blank"><strong>Unit of Work</strong></a> - this application uses a variant of <a title="Implementing the Repository and Unit of Work Patterns in an ASP.NET MVC Application (9 of 10)" href="http://www.asp.net/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">this example</a>.</li>
	<li><a title="Dependency injection" href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank"><strong>Dependency Injection</strong></a> - this application will use <a title="Patterns &amp; Practices - Unity" href="https://unity.codeplex.com/" target="_blank">Microsoft Unity</a> as its dependency injection container and the <a title="Unity.Mvc5 1.1.0" href="https://www.nuget.org/packages/Unity.Mvc5/" target="_blank">Unity.Mvc5</a> library.</li>
</ul>
<h5>Persistence</h5>
I will be writing two different data layers and expect that I should be able to switch between them without much effort, thanks to the persistence ignorance requirement:
<h4>Next Steps</h4>
In this part, I’ve identified the initial, high-level, function and technical requirements for persistence-ignorant, properly-layered ASP.NET MVC 5 web application with ASP.NET Identity. I spent time on some of the patterns I’ll be using and provided plenty of links for those who want to learn more. In Part 2, I’ll fire up Visual Studio and start putting the solution together.

Until next time, happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>129</wp:post_id>
		<wp:post_date>2015-01-14 18:33:27</wp:post_date>
		<wp:post_date_gmt>2015-01-14 23:33:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>persistence-ignorant-asp-net-identity-with-patterns-part-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-identity"><![CDATA[ASP.NET Identity]]></category>
		<category domain="category" nicename="asp-net-mvc-5"><![CDATA[ASP.NET MVC 5]]></category>
		<category domain="category" nicename="patterns"><![CDATA[Patterns]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[73]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[The first in a series or posts that demonstrate how to implement persistence-ignorant ASP.NET Identity in a well-layered MVC 5 application, using patterns.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[asp.net identity]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[persistence-ignorant-aspnet-identity-repository-pattern-unit-of-work-dependency-injection-part-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Persistence-Ignorant ASP.NET Identity with Patterns (Part 2)</title>
		<link>http://hosting.bizinix.com/timschreiber/?p=142</link>
		<pubDate>Thu, 15 Jan 2015 19:53:20 +0000</pubDate>
		<dc:creator>TscWpAdmin</dc:creator>
		<guid isPermaLink="false">http://hosting.bizinix.com/timschreiber/?p=142</guid>
		<description></description>
		<content:encoded><![CDATA[<em>This series of posts requires a functional understanding of ASP.NET Identity 2.x. If you haven’t had at least some kind of exposure, this is a good place to start: <a title="ASP.NET Identity" href="http://www.asp.net/identity" target="_blank">http://www.asp.net/identity</a>.</em>

<a title="Persistence Ignorant ASP.NET Identity with Patterns (Part 1)" href="http://hosting.bizinix.com/timschreiber/2015/01/14/persistence-ignorant-asp-net-identity-with-patterns-part-1/">In Part 1</a>, I showed you how the default template for an ASP.NET MVC 5 web application with ASP.NET Identity produces a monolithic application that ignores important concepts like separation of concerns, patterns (specifically, repository, unit of work, and dependency injection), persistence ignorance, and proper layering. In this part, I will lay out the initial, high-level requirements for my implementation of persistence ignorant ASP.NET Identity in a properly-layered MVC 5 application, following the Repository, Unit of Work and Dependency Injection patterns.
<h2>Functional Requirements</h2>
For the purposes of this tutorial, this application must possess all of the functionality you would get from an application created from the default ASP.NET MVC 5 web application template with “Individual User Accounts” authentication.
<h2>Technical Requirements</h2>
<h3>Persistence Ignorance</h3>
Fundamentally, persistence ignorance means that your entities shouldn’t care about how they’re stored, created, retrieved, updated, or deleted. Instead you just focus on modeling the business domain. The purpose of this post is not to explain persistence ignorance or Domain-Driven Design or try to convince you why you should use them, but if you’d like to know more, this is a good article: <a title="Domain Driven Design - Clear Your Concepts Before You Start" href="http://www.codeproject.com/Articles/339725/Domain-Driven-Design-Clear-Your-Concepts-Before-Yo" target="_blank">Domain Driven Design - Clear Your Concepts Before You Start</a>.

For the purposes of this application, I am going to use persistence ignorance with an assumption that we’re using an ORM that supports lazy loading of related objects and collections through the use of dynamic proxies, which does make a couple of small difference in the code (but they’re good differences):
<ul>
	<li><span style="line-height: 13px;">Our entity classes must not be sealed, must have a default constructor, and all public navigation properties must be virtual.
</span></li>
	<li>We’ll be able to take advantage of lazy loading of related objects and collections (in the UserStore methods for example).</li>
</ul>
<h3>Proper Layering</h3>
The concept of “proper layering” is highly subjective. At the very least, that means presentation is isolated from data access by an intermediate core logic layer. I’ll cover the layering of this application a little later on.
<h3>Patterns</h3>
As I’ve mentioned before, this application will follow some important architectural patterns, including repository, unit of work, and dependency injection. The purpose of this post is not to explain what these patterns are or why you should use them, but I will provide links to more information about these patterns how to use them:
<ul>
	<li><a title="P of EAA: Repository" href="http://martinfowler.com/eaaCatalog/repository.html" target="_blank"><strong>Repository</strong></a> - specifically the use of generic repositories based on <a title="Implementing the Repository and Unit of Work Patterns in an ASP.NET MVC Application (9 of 10)" href="http://www.asp.net/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">this example</a>.</li>
	<li><a title="P of EAA: Unit of Work" href="http://martinfowler.com/eaaCatalog/unitOfWork.html" target="_blank"><strong>Unit of Work</strong></a> - this application uses a variant of <a title="Implementing the Repository and Unit of Work Patterns in an ASP.NET MVC Application (9 of 10)" href="http://www.asp.net/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application" target="_blank">this example</a>.</li>
	<li><a title="Dependency injection" href="http://en.wikipedia.org/wiki/Dependency_injection" target="_blank"><strong>Dependency Injection</strong></a> - this application will use <a title="Patterns &amp; Practices - Unity" href="https://unity.codeplex.com/" target="_blank">Microsoft Unity</a> as its dependency injection container and the <a title="Unity.Mvc5 1.1.0" href="https://www.nuget.org/packages/Unity.Mvc5/" target="_blank">Unity.Mvc5</a> library.</li>
</ul>
<h3>Persistence</h3>
I will be writing two different data layers and expect that I should be able to switch between them without much effort, thanks to the persistence ignorance requirement:
<h3>Next Steps</h3>
In this part, I’ve identified the initial, high-level, function and technical requirements for persistence-ignorant, properly-layered ASP.NET MVC 5 web application with ASP.NET Identity. I spent time on some of the patterns I’ll be using and provided plenty of links for those who want to learn more. In Part 3, I’ll fire up Visual Studio and start putting the solution together.

Until next time, happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>142</wp:post_id>
		<wp:post_date>2015-01-15 14:53:20</wp:post_date>
		<wp:post_date_gmt>2015-01-15 19:53:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>persistence-ignorant-asp-net-identity-with-patterns-part-2</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="asp-net-identity"><![CDATA[ASP.NET Identity]]></category>
		<category domain="category" nicename="asp-net-mvc-5"><![CDATA[ASP.NET MVC 5]]></category>
		<category domain="category" nicename="patterns"><![CDATA[Patterns]]></category>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_linkdex</wp:meta_key>
			<wp:meta_value><![CDATA[71]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_focuskw</wp:meta_key>
			<wp:meta_value><![CDATA[ASP.NET Identity]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_title</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_metadesc</wp:meta_key>
			<wp:meta_value><![CDATA[The second in a series or posts that demonstrate how to implement persistence-ignorant ASP.NET Identity in a well-layered MVC 5 application, using patterns.]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-noindex</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-nofollow</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_meta-robots-adv</wp:meta_key>
			<wp:meta_value><![CDATA[none]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-prio</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_sitemap-html-include</wp:meta_key>
			<wp:meta_value><![CDATA[-]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_canonical</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_yoast_wpseo_redirect</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_responsive_layout</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
